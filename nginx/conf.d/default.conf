# nginx/conf.d/default.conf
# Nginx configuration for your e-commerce application

server {
    listen 80; # Listen for incoming HTTP connections
    server_name your_domain.com www.your_domain.com; # Replace with your actual domain(s)

    # # Proxy all root requests to the frontend service
    # location / {
    #     proxy_pass http://frontend:80; # Assuming frontend serves on port 80
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection 'upgrade';
    #     proxy_set_header Host $host;
    #     proxy_cache_bypass $http_upgrade;
    # }

    # Proxy API requests to the backend service
    location /api/ {
        proxy_pass http://redux:8080; # Assuming backend listens on port 5000
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Specific configuration for Socket.IO WebSocket connections
    location /socket.io/ {
        proxy_pass http://redux:8080/socket.io/; # Route to Socket.IO path on backend
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade"; # Crucial for WebSocket upgrade
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 86400s; # Long timeout for persistent WebSocket connections
    }

    # Optional: HTTPS configuration with Let's Encrypt / Certbot
    # Uncomment and configure if you plan to use SSL/TLS
    # listen 443 ssl;
    # ssl_certificate /etc/nginx/ssl/live/your_domain.com/fullchain.pem;
    # ssl_certificate_key /etc/nginx/ssl/live/your_domain.com/privkey.pem;
    # include /etc/nginx/ssl/options-ssl-nginx.conf; # Standard SSL options (e.g., from Certbot)
    # ssl_dhparam /etc/nginx/ssl/ssl-dhparams.pem; # DH params (e.g., from Certbot)

    # Optional: Redirect HTTP to HTTPS
    # server {
    #     listen 80;
    #     server_name your_domain.com www.your_domain.com;
    #     return 301 https://$host$request_uri;
    # }
}

